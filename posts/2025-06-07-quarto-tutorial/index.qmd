---
title: "How to Publish a Quarto Website with GitHub Actions"
description: "blog post description (appears underneath the title in smaller text) which is included on the listing page"
author:
  - name: Kelly Shee
    url: https://kellyshee.github.io/
date: 06-07-2025
categories: [Quarto, R, GitHub] # self-defined categories
citation: 
  url: https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/ 
image: preview-image.png
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!

format: 
  html:
    code-copy: true
    
    other-links:
      - text: Youtube guide
        href: https://www.youtube.com/watch?v=arzBRW5XIkg&list=LL
    
    code-links:
      - text: Source
        href: https://github.com/kellyshee/kellyshee.github.io/blob/main/index.qmd
        icon: github
      - text: Knitr with renv
        href: https://quarto.org/docs/publishing/github-pages.html

number-sections: true

lightbox: true
---

You need the following:

- [ ] RStudio
- [ ] GitHub account
- [ ] 6 to 20 minutes

::: {.callout-note}
This website's directory is `kellyshee.github.io`. The directory in the images is `quarto_web_tutorial`, which I deleted because I dislike underscores in URLs.
:::

# Create a R project

::: {.panel-tabset}

## Actions

1. Navigate to File > New Project > New Directory > Quarto Website.
2. **Directory name** 
    i) If this website is for . . .
         A.  yourself: `your-github-username.github.io`
         B.  class: `your-class-name`
3. Create project as **subdirectory**
    i) Where do you want to place this project? It should be somewhere easy to find, such as on your desktop.
    ii) I'll be creating more version-controlled projects, so I placed this directory (`kellyshee.github.io`) inside a "github" folder, which is located inside my Box drive. Therefore, this directory's file path is the following:
  
```{r eval=FALSE}
├── Box-Box
  ├── github
    ├── kellyshee.github.io
```

4. Engine: **Knitr**
5. Select **Create a git repository**
6. Select **Use renv with this project**

## Visual

![](images/01_create_project.png){group="my-gallery"}

![](images/02_project_created.png){group="my-gallery"}

:::

# Create a GitHub repo

::: {.panel-tabset}

## Actions

1. Go to [GitHub](https://GitHub.com).
2. Click the green "New" button next to "Top repositories" in the left column.
3. Type your **repository name**, which must be the same as your directory name. 
4. Do not change anything else. Scroll down to create your repository.

## Visual

![](images/03_create_repo.png){group="my-gallery"}

:::

# Copy Git commands 

::: {.panel-tabset}

## Actions

1. Scroll to the section that says ". . . or push an existing repository from the command line." 
2. Copy the first two lines.
3. Return to RStudio.

## Visual

![](images/04_copy_git.png){group="my-gallery"}

:::

# Paste Git commands into terminal

::: {.panel-tabset}

## Actions

1. Navigate to the console pane and switch to the terminal tab.
2. Paste and enter the commands. The terminal will not return anything.

## Visual

![](images/05_paste_git.png){group="my-gallery"}

:::

# Push local files to repo

::: {.panel-tabset}

## Actions

1. Copy and paste the following commands one by one into the terminal. Output will apppear, indicating that files are being uploaded to your repository.

```{r, eval=F, filename = "Terminal"}
git add .
git commit -m "Initial commit"
git push origin main
```

2. Return to your GitHub repository and refresh the page. Your project's files should appear there.

## Visual

![](images/06_push.png){group="my-gallery"}

![](images/07_files_appear.png){group="my-gallery"}

:::

# Create gh-pages branch

::: {.panel-tabset}

## Actions

1. On the same page, click the "main" branch button underneath the repository name.
2. Click "View all branches."
3. Click "New branch" on the right side of the screen.
4. Name and create a **new branch** called `gh-pages`.

## Visual

![](images/08_create_branch.png){group="my-gallery"}

![](images/09_gh-pages.png){group="my-gallery"}

:::

# Create automation file

::: {.panel-tabset}

## Actions

1. Return to RStudio and navigate to the file tab in the output pane.
2. Create a **new folder** named `.github`
3. Inside the `.github` folder, create **another new folder** named `workflows`
4. Inside the `workflows` folder, create a **text file** named `publish.yml`.

The file path of `publish.yml` should be the following:

```{r eval=F}
├── ...
  ├── kellyshee.github.io
    ├── kellyshee.github.io.Rproj
    ├── other files
    ├── .github
      ├── workflows
        ├── publish.yml
```

## Visual

![](images/13_publishyml.png){group="my-gallery"}

![](images/14_publishyml_created.png)

:::

# Copy and paste code into publish.yml

Paste the following code into `publish.yml`, then save the file.

```{r, eval = F, filename = ".github/workflows/publish.yml"}
# Knitr with renv

on:
  workflow_dispatch:
  push:
    branches: main

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.2.0'

      - name: Install R Dependencies
        uses: r-lib/actions/setup-renv@v2
        with:
          cache-version: 1

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

# Push publish.yml to repo

::: {.panel-tabset}

## Actions

1. Return to the terminal tab in the console pane.
2. Copy and paste the following commands line by line into the terminal. Output will appear.

```{r, eval=F, filename = "Terminal"}
git add .
git commit -m "Add publish.yml to automate publishing of site"
git push origin main
``` 

## Visual

![](images/16_push.png){group="my-gallery"}

:::

# Check repo settings

::: {.panel-tabset}

## Actions

1. Return to GitHub.
2. Click on the Actions tab. Wait until all actions are green.
3. Click on the "Settings" tab. Look at the side column and click "Pages." Ensure that your GitHub Pages site is built from the `gh-pages` branch.
4. Click "Visit site" at the top of the page. Whenever you edit this site in RStudio, you can use the three Git commands to publish it automatically. It'll take a couple minutes for the site to change.

## Visual

![](images/18_actions_workflows.png)

![](images/19_actions_done.png){group="my-gallery"}

![](images/17_settings_gh-pages.png){group="my-gallery"}

![](images/21_website_created.png){group="my-gallery"}

:::

# Credit

I learned this from a [video](https://www.youtube.com/watch?v=arzBRW5XIkg&list=LL) by [Melissa Van Bussel](https://www.melissavanbussel.com). My tutorial differs from hers in that I use RStudio's terminal instead of a Windows terminal with zsh.